--// Load Luna UI
local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/master/source.lua"))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

--// Window
local Window = Luna:CreateWindow({
    Name = "Violence District V1.1",
    Subtitle = "Overview Hub",
    LogoID = "",
    LoadingEnabled = true,
    LoadingTitle = "Violence District",
    LoadingSubtitle = "Loading",
    ConfigSettings = { ConfigFolder = "NXP Hub" },
    KeySystem = false
})

--// Tabs (ordered)
local Visuals = Window:CreateTab({
    Name = "Visuals",
    Icon = "visibility", -- 👁 Eyes
    ImageSource = "Material",
    ShowTitle = true
})

local Player = Window:CreateTab({
    Name = "Player",
    Icon = "people", -- 👥 People
    ImageSource = "Material",
    ShowTitle = true
})

local Misc = Window:CreateTab({
    Name = "Misc",
    Icon = "settings", -- ⚙️ Gear
    ImageSource = "Material",
    ShowTitle = true
})

-- Theme + Config
local ThemeTab = Window:CreateTab({ Name = "Theme", Icon = "palette" }) ThemeTab:BuildThemeSection()
local ConfigTab = Window:CreateTab({ Name = "Config", Icon = "settings" }) ConfigTab:BuildConfigSection()

--// Helper: Get Killer
local function getKillerModel()
    for _, plr in pairs(Players:GetPlayers()) do
        if tostring(plr.Team) == "Killer" then
            return plr.Character
        end
    end
end

--// VISUALS TAB
Visuals:CreateToggle({
    Name = "Killer ESP",
    CurrentValue = false,
    Callback = function(state)
        _G.killers = state
        task.spawn(function()
            while task.wait() and _G.killers do
                local killer = getKillerModel()
                if killer and not killer:FindFirstChild("NXP_Highlight") then
                    local hl = Instance.new("Highlight", killer)
                    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                    hl.Name = "NXP_Highlight"
                end
            end
        end)
    end
})

Visuals:CreateToggle({
    Name = "Killer Nametag",
    CurrentValue = false,
    Callback = function(state)
        _G.killerNametag = state
        task.spawn(function()
            while task.wait() and _G.killerNametag do
                local killer = getKillerModel()
                if killer and not killer:FindFirstChild("NXP_Nametag") then
                    local bb = Instance.new("BillboardGui", killer)
                    bb.Size = UDim2.new(4, 0, 1, 0)
                    bb.AlwaysOnTop = true
                    bb.Name = "NXP_Nametag"
                    local text = Instance.new("TextLabel", bb)
                    text.TextColor3 = Color3.fromRGB(255, 0, 0)
                    text.TextStrokeTransparency = 0
                    text.Text = "Killer"
                    text.TextSize = 20
                    text.BackgroundTransparency = 1
                    text.Size = UDim2.new(1, 0, 1, 0)
                end
            end
        end)
    end
})

Visuals:CreateToggle({
    Name = "Survivors ESP",
    CurrentValue = false,
    Callback = function(state)
        _G.survivors = state
        task.spawn(function()
            while task.wait() and _G.survivors do
                for _, plr in pairs(Players:GetPlayers()) do
                    if tostring(plr.Team) ~= "Killer" and plr.Character and not plr.Character:FindFirstChild("NXP_Highlight") then
                        local hl = Instance.new("Highlight", plr.Character)
                        hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                        hl.Name = "NXP_Highlight"
                        hl.FillColor = Color3.fromRGB(0, 0, 255)
                    end
                end
            end
        end)
    end
})

Visuals:CreateToggle({
    Name = "Generators ESP",
    CurrentValue = false,
    Callback = function(state)
        _G.generators = state
        task.spawn(function()
            while task.wait() and _G.generators do
                for _, v in pairs(workspace.Map:GetChildren()) do
                    if v.Name == "Generator" and not v:FindFirstChild("NXP_Highlight") then
                        local hl = Instance.new("Highlight", v)
                        hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                        hl.Name = "NXP_Highlight"
                        hl.FillColor = Color3.fromRGB(255, 255, 51)
                    end
                end
            end
        end)
    end
})

Visuals:CreateToggle({
    Name = "Generators Nametags",
    CurrentValue = false,
    Callback = function(state)
        _G.generatorsNametag = state
        task.spawn(function()
            while task.wait() and _G.generatorsNametag do
                for _, v in pairs(workspace.Map:GetChildren()) do
                    if v.Name == "Generator" and v:FindFirstChild("HitBox") and not v:FindFirstChild("NXP_Nametag") then
                        local bb = Instance.new("BillboardGui", v.HitBox)
                        bb.Size = UDim2.new(4, 0, 1, 0)
                        bb.AlwaysOnTop = true
                        bb.Name = "NXP_Nametag"
                        local text = Instance.new("TextLabel", bb)
                        text.TextColor3 = Color3.fromRGB(255, 255, 255)
                        text.TextStrokeTransparency = 0
                        text.Text = "Generator"
                        text.TextSize = 20
                        text.BackgroundTransparency = 1
                        text.Size = UDim2.new(1, 0, 1, 0)
                    end
                end
            end
        end)
    end
})

--// PLAYER TAB
local SpeedValue = 16

-- Speed controls
Player:CreateSlider({
    Name = "Speed Value",
    Range = {1, 20},
    Increment = 0.5,
    CurrentValue = SpeedValue,
    Callback = function(val)
        SpeedValue = val
    end
})

Player:CreateInput({
    Name = "Set Speed",
    PlaceholderText = "Enter speed (1-20)",
    Numeric = true,
    CurrentValue = tostring(SpeedValue),
    Callback = function(txt)
        local num = tonumber(txt)
        if num then
            num = math.clamp(num, 1, 20)
            SpeedValue = num
        end
    end
})

Player:CreateToggle({
    Name = "Speed Toggle",
    CurrentValue = false,
    Callback = function(state)
        _G.speed = state
        task.spawn(function()
            while task.wait() and _G.speed do
                local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
                if humanoid and humanoid.MoveDirection.Magnitude > 0 then
                    LocalPlayer.Character:TranslateBy(humanoid.MoveDirection * SpeedValue * RunService.RenderStepped:Wait())
                end
            end
        end)
    end
})

-- Skill check protection
local playerSection = Player:CreateSection("Skill Check Protection")

Player:CreateToggle({
    Name = "Anti Generator Skill Check Fail",
    CurrentValue = false,
    Callback = function(state)
        _G.antiFail = state
    end
})

Player:CreateToggle({
    Name = "Anti Heal Skill Check Fail",
    CurrentValue = false,
    Callback = function(state)
        _G.antiHealFail = state
    end
})

--// Hook skill check bypass
local old
old = hookmetamethod(game, "__namecall", function (self, ...)
    if _G.antiFail and tostring(self) == "SkillCheckResultEvent" and not checkcaller() then
        return
    elseif _G.antiHealFail and tostring(self) == "HealingSkillCheckResultEvent" and not checkcaller() then
        return
    end
    return old(self, ...)
end)

--// MISC TAB
Misc:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Callback = function(state)
        _G.noclip = state
        task.spawn(function()
            while task.wait() and _G.noclip do
                if LocalPlayer.Character then
                    for _, v in pairs(LocalPlayer.Character:GetChildren()) do
                        if v:IsA("BasePart") then
                            v.CanCollide = false
                        end
                    end
                end
            end
        end)
    end
})

Misc:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Callback = function(state)
        if not state and _G.infJumpConn then
            _G.infJumpConn:Disconnect()
            return
        end
        _G.infJumpConn = game:GetService("UserInputService").JumpRequest:Connect(function()
            pcall(function()
                LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end)
        end)
    end
})

Misc:CreateButton({
    Name = "No Fog",
    Callback = function()
        for _, v in pairs(game.Lighting:GetDescendants()) do
            if v:IsA("Atmosphere") then v:Destroy() end
        end
        game.Lighting.FogEnd = 999999
    end
})

Misc:CreateButton({
    Name = "Kill Yourself",
    Callback = function()
        if LocalPlayer.Character then LocalPlayer.Character:BreakJoints() end
    end
})

Misc:CreateButton({
    Name = "Rejoin",
    Callback = function()
        game:GetService("TeleportService"):Teleport(game.PlaceId, LocalPlayer)
    end
})
